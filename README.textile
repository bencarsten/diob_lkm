h1. Dynamic I/O buffering (a Linux kernel module)

h2. Introduction

The idea of this module is to provide automatic buffering for I/O on Linux at the level of system calls. Files are being watched while they are read and written, and whenever a  large file is read in many small chunks (which is the default behaviour of most programs), a buffer of up to 4 MB is allocated in kernel memory, and file content is pre-fetched.

h2. Strategy

Every process has a file descriptor table in which file descriptors are mapped to entries in the system-wide open file table. These pointers are converted into a CRC-16 checksum ("the hash"), resulting in a maximum of 2^16 files being watched for I/O behaviour, and each file is managed internally via its hash.

Whenever a file gets opened, a couple of checks are performed to determine whether the file should be watched:

* it must be a regular file via fstat()
* it must have a minimum size of 16 MB

If these tests pass, the file will be watched. 

Whenever the read system call is invoked for a watched file, a counter is increased every time 64k or less are read in a row. When this counter reaches 1024, buffering gets activated for the file: a 4 MB buffer is allocated in kernel memory, filled from the current file position and returned to the user space in small chunks as requested, the buffer gets re-filled automatically whenever it is necessary. On every read call which just returns data from the buffer instead actually performing a file system read, the file pointer is advanced as necessary (which should only affect internal kernel data structures and result in no actual I/O).

Any call to open, close, lseek or write will de-activate buffering.

h2. Results

A reduction in reading time to about 50% could be observed, it is expected that this module will mitigate I/O problems due to excessive amounts of I/O system calls resulting from small default buffer sizes.

h2. Alternatives

Writing a kernel module carries a great potential to mess a system up so bad it needs to be reset. Alternatively, the provided functionality could be implemented as patched gnulibc, but there are problems with the LD_PRELOAD approach: it's not working reliably.

h2. To do list

- it is unclear what happens when the module is unloaded and hooked syscalls, especially reads, are still pending
- don't use vmalloc() to allocate accelerators, manage a fixed array of accelerator slots to save memory
- determine memory footprint
- properly handle return values